// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             v5.29.1
// source: student/v1/student.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationStudentCreateStudent = "/api.student.v1.Student/CreateStudent"
const OperationStudentGetStudent = "/api.student.v1.Student/GetStudent"

type StudentHTTPServer interface {
	CreateStudent(context.Context, *CrStuReq) (*Resp, error)
	GetStudent(context.Context, *StudentReq) (*UserReply, error)
}

func RegisterStudentHTTPServer(s *http.Server, srv StudentHTTPServer) {
	r := s.Route("/")
	r.GET("/student/get", _Student_GetStudent0_HTTP_Handler(srv))
	r.POST("student/create", _Student_CreateStudent0_HTTP_Handler(srv))
}

func _Student_GetStudent0_HTTP_Handler(srv StudentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in StudentReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStudentGetStudent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetStudent(ctx, req.(*StudentReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserReply)
		return ctx.Result(200, reply)
	}
}

func _Student_CreateStudent0_HTTP_Handler(srv StudentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CrStuReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStudentCreateStudent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateStudent(ctx, req.(*CrStuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Resp)
		return ctx.Result(200, reply)
	}
}

type StudentHTTPClient interface {
	CreateStudent(ctx context.Context, req *CrStuReq, opts ...http.CallOption) (rsp *Resp, err error)
	GetStudent(ctx context.Context, req *StudentReq, opts ...http.CallOption) (rsp *UserReply, err error)
}

type StudentHTTPClientImpl struct {
	cc *http.Client
}

func NewStudentHTTPClient(client *http.Client) StudentHTTPClient {
	return &StudentHTTPClientImpl{client}
}

func (c *StudentHTTPClientImpl) CreateStudent(ctx context.Context, in *CrStuReq, opts ...http.CallOption) (*Resp, error) {
	var out Resp
	pattern := "student/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStudentCreateStudent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StudentHTTPClientImpl) GetStudent(ctx context.Context, in *StudentReq, opts ...http.CallOption) (*UserReply, error) {
	var out UserReply
	pattern := "/student/get"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStudentGetStudent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
